
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Kota` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Kota
 * 
 */
export type KotaModel = runtime.Types.Result.DefaultSelection<Prisma.$KotaPayload>

export type AggregateKota = {
  _count: KotaCountAggregateOutputType | null
  _min: KotaMinAggregateOutputType | null
  _max: KotaMaxAggregateOutputType | null
}

export type KotaMinAggregateOutputType = {
  id: string | null
  name: string | null
  dibuatTanggal: Date | null
}

export type KotaMaxAggregateOutputType = {
  id: string | null
  name: string | null
  dibuatTanggal: Date | null
}

export type KotaCountAggregateOutputType = {
  id: number
  name: number
  dibuatTanggal: number
  _all: number
}


export type KotaMinAggregateInputType = {
  id?: true
  name?: true
  dibuatTanggal?: true
}

export type KotaMaxAggregateInputType = {
  id?: true
  name?: true
  dibuatTanggal?: true
}

export type KotaCountAggregateInputType = {
  id?: true
  name?: true
  dibuatTanggal?: true
  _all?: true
}

export type KotaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Kota to aggregate.
   */
  where?: Prisma.KotaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Kotas to fetch.
   */
  orderBy?: Prisma.KotaOrderByWithRelationInput | Prisma.KotaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.KotaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Kotas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Kotas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Kotas
  **/
  _count?: true | KotaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: KotaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: KotaMaxAggregateInputType
}

export type GetKotaAggregateType<T extends KotaAggregateArgs> = {
      [P in keyof T & keyof AggregateKota]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateKota[P]>
    : Prisma.GetScalarType<T[P], AggregateKota[P]>
}




export type KotaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.KotaWhereInput
  orderBy?: Prisma.KotaOrderByWithAggregationInput | Prisma.KotaOrderByWithAggregationInput[]
  by: Prisma.KotaScalarFieldEnum[] | Prisma.KotaScalarFieldEnum
  having?: Prisma.KotaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: KotaCountAggregateInputType | true
  _min?: KotaMinAggregateInputType
  _max?: KotaMaxAggregateInputType
}

export type KotaGroupByOutputType = {
  id: string
  name: string
  dibuatTanggal: Date
  _count: KotaCountAggregateOutputType | null
  _min: KotaMinAggregateOutputType | null
  _max: KotaMaxAggregateOutputType | null
}

type GetKotaGroupByPayload<T extends KotaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<KotaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof KotaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], KotaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], KotaGroupByOutputType[P]>
      }
    >
  >



export type KotaWhereInput = {
  AND?: Prisma.KotaWhereInput | Prisma.KotaWhereInput[]
  OR?: Prisma.KotaWhereInput[]
  NOT?: Prisma.KotaWhereInput | Prisma.KotaWhereInput[]
  id?: Prisma.StringFilter<"Kota"> | string
  name?: Prisma.StringFilter<"Kota"> | string
  dibuatTanggal?: Prisma.DateTimeFilter<"Kota"> | Date | string
  daftarAgenda?: Prisma.AgendaListRelationFilter
}

export type KotaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
  daftarAgenda?: Prisma.AgendaOrderByRelationAggregateInput
}

export type KotaWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.KotaWhereInput | Prisma.KotaWhereInput[]
  OR?: Prisma.KotaWhereInput[]
  NOT?: Prisma.KotaWhereInput | Prisma.KotaWhereInput[]
  dibuatTanggal?: Prisma.DateTimeFilter<"Kota"> | Date | string
  daftarAgenda?: Prisma.AgendaListRelationFilter
}, "id" | "name">

export type KotaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
  _count?: Prisma.KotaCountOrderByAggregateInput
  _max?: Prisma.KotaMaxOrderByAggregateInput
  _min?: Prisma.KotaMinOrderByAggregateInput
}

export type KotaScalarWhereWithAggregatesInput = {
  AND?: Prisma.KotaScalarWhereWithAggregatesInput | Prisma.KotaScalarWhereWithAggregatesInput[]
  OR?: Prisma.KotaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.KotaScalarWhereWithAggregatesInput | Prisma.KotaScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Kota"> | string
  name?: Prisma.StringWithAggregatesFilter<"Kota"> | string
  dibuatTanggal?: Prisma.DateTimeWithAggregatesFilter<"Kota"> | Date | string
}

export type KotaCreateInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
  daftarAgenda?: Prisma.AgendaCreateNestedManyWithoutKotaInput
}

export type KotaUncheckedCreateInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
  daftarAgenda?: Prisma.AgendaUncheckedCreateNestedManyWithoutKotaInput
}

export type KotaUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  daftarAgenda?: Prisma.AgendaUpdateManyWithoutKotaNestedInput
}

export type KotaUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  daftarAgenda?: Prisma.AgendaUncheckedUpdateManyWithoutKotaNestedInput
}

export type KotaCreateManyInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
}

export type KotaUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KotaUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KotaNullableScalarRelationFilter = {
  is?: Prisma.KotaWhereInput | null
  isNot?: Prisma.KotaWhereInput | null
}

export type KotaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
}

export type KotaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
}

export type KotaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
}

export type KotaCreateNestedOneWithoutDaftarAgendaInput = {
  create?: Prisma.XOR<Prisma.KotaCreateWithoutDaftarAgendaInput, Prisma.KotaUncheckedCreateWithoutDaftarAgendaInput>
  connectOrCreate?: Prisma.KotaCreateOrConnectWithoutDaftarAgendaInput
  connect?: Prisma.KotaWhereUniqueInput
}

export type KotaUpdateOneWithoutDaftarAgendaNestedInput = {
  create?: Prisma.XOR<Prisma.KotaCreateWithoutDaftarAgendaInput, Prisma.KotaUncheckedCreateWithoutDaftarAgendaInput>
  connectOrCreate?: Prisma.KotaCreateOrConnectWithoutDaftarAgendaInput
  upsert?: Prisma.KotaUpsertWithoutDaftarAgendaInput
  disconnect?: Prisma.KotaWhereInput | boolean
  delete?: Prisma.KotaWhereInput | boolean
  connect?: Prisma.KotaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.KotaUpdateToOneWithWhereWithoutDaftarAgendaInput, Prisma.KotaUpdateWithoutDaftarAgendaInput>, Prisma.KotaUncheckedUpdateWithoutDaftarAgendaInput>
}

export type KotaCreateWithoutDaftarAgendaInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
}

export type KotaUncheckedCreateWithoutDaftarAgendaInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
}

export type KotaCreateOrConnectWithoutDaftarAgendaInput = {
  where: Prisma.KotaWhereUniqueInput
  create: Prisma.XOR<Prisma.KotaCreateWithoutDaftarAgendaInput, Prisma.KotaUncheckedCreateWithoutDaftarAgendaInput>
}

export type KotaUpsertWithoutDaftarAgendaInput = {
  update: Prisma.XOR<Prisma.KotaUpdateWithoutDaftarAgendaInput, Prisma.KotaUncheckedUpdateWithoutDaftarAgendaInput>
  create: Prisma.XOR<Prisma.KotaCreateWithoutDaftarAgendaInput, Prisma.KotaUncheckedCreateWithoutDaftarAgendaInput>
  where?: Prisma.KotaWhereInput
}

export type KotaUpdateToOneWithWhereWithoutDaftarAgendaInput = {
  where?: Prisma.KotaWhereInput
  data: Prisma.XOR<Prisma.KotaUpdateWithoutDaftarAgendaInput, Prisma.KotaUncheckedUpdateWithoutDaftarAgendaInput>
}

export type KotaUpdateWithoutDaftarAgendaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KotaUncheckedUpdateWithoutDaftarAgendaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type KotaCountOutputType
 */

export type KotaCountOutputType = {
  daftarAgenda: number
}

export type KotaCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  daftarAgenda?: boolean | KotaCountOutputTypeCountDaftarAgendaArgs
}

/**
 * KotaCountOutputType without action
 */
export type KotaCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KotaCountOutputType
   */
  select?: Prisma.KotaCountOutputTypeSelect<ExtArgs> | null
}

/**
 * KotaCountOutputType without action
 */
export type KotaCountOutputTypeCountDaftarAgendaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AgendaWhereInput
}


export type KotaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  dibuatTanggal?: boolean
  daftarAgenda?: boolean | Prisma.Kota$daftarAgendaArgs<ExtArgs>
  _count?: boolean | Prisma.KotaCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kota"]>

export type KotaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  dibuatTanggal?: boolean
}, ExtArgs["result"]["kota"]>

export type KotaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  dibuatTanggal?: boolean
}, ExtArgs["result"]["kota"]>

export type KotaSelectScalar = {
  id?: boolean
  name?: boolean
  dibuatTanggal?: boolean
}

export type KotaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "dibuatTanggal", ExtArgs["result"]["kota"]>
export type KotaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  daftarAgenda?: boolean | Prisma.Kota$daftarAgendaArgs<ExtArgs>
  _count?: boolean | Prisma.KotaCountOutputTypeDefaultArgs<ExtArgs>
}
export type KotaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type KotaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $KotaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Kota"
  objects: {
    daftarAgenda: Prisma.$AgendaPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    dibuatTanggal: Date
  }, ExtArgs["result"]["kota"]>
  composites: {}
}

export type KotaGetPayload<S extends boolean | null | undefined | KotaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$KotaPayload, S>

export type KotaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<KotaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: KotaCountAggregateInputType | true
  }

export interface KotaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kota'], meta: { name: 'Kota' } }
  /**
   * Find zero or one Kota that matches the filter.
   * @param {KotaFindUniqueArgs} args - Arguments to find a Kota
   * @example
   * // Get one Kota
   * const kota = await prisma.kota.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends KotaFindUniqueArgs>(args: Prisma.SelectSubset<T, KotaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__KotaClient<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Kota that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {KotaFindUniqueOrThrowArgs} args - Arguments to find a Kota
   * @example
   * // Get one Kota
   * const kota = await prisma.kota.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends KotaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, KotaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__KotaClient<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Kota that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KotaFindFirstArgs} args - Arguments to find a Kota
   * @example
   * // Get one Kota
   * const kota = await prisma.kota.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends KotaFindFirstArgs>(args?: Prisma.SelectSubset<T, KotaFindFirstArgs<ExtArgs>>): Prisma.Prisma__KotaClient<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Kota that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KotaFindFirstOrThrowArgs} args - Arguments to find a Kota
   * @example
   * // Get one Kota
   * const kota = await prisma.kota.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends KotaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, KotaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__KotaClient<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Kotas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KotaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Kotas
   * const kotas = await prisma.kota.findMany()
   * 
   * // Get first 10 Kotas
   * const kotas = await prisma.kota.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const kotaWithIdOnly = await prisma.kota.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends KotaFindManyArgs>(args?: Prisma.SelectSubset<T, KotaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Kota.
   * @param {KotaCreateArgs} args - Arguments to create a Kota.
   * @example
   * // Create one Kota
   * const Kota = await prisma.kota.create({
   *   data: {
   *     // ... data to create a Kota
   *   }
   * })
   * 
   */
  create<T extends KotaCreateArgs>(args: Prisma.SelectSubset<T, KotaCreateArgs<ExtArgs>>): Prisma.Prisma__KotaClient<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Kotas.
   * @param {KotaCreateManyArgs} args - Arguments to create many Kotas.
   * @example
   * // Create many Kotas
   * const kota = await prisma.kota.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends KotaCreateManyArgs>(args?: Prisma.SelectSubset<T, KotaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Kotas and returns the data saved in the database.
   * @param {KotaCreateManyAndReturnArgs} args - Arguments to create many Kotas.
   * @example
   * // Create many Kotas
   * const kota = await prisma.kota.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Kotas and only return the `id`
   * const kotaWithIdOnly = await prisma.kota.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends KotaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, KotaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Kota.
   * @param {KotaDeleteArgs} args - Arguments to delete one Kota.
   * @example
   * // Delete one Kota
   * const Kota = await prisma.kota.delete({
   *   where: {
   *     // ... filter to delete one Kota
   *   }
   * })
   * 
   */
  delete<T extends KotaDeleteArgs>(args: Prisma.SelectSubset<T, KotaDeleteArgs<ExtArgs>>): Prisma.Prisma__KotaClient<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Kota.
   * @param {KotaUpdateArgs} args - Arguments to update one Kota.
   * @example
   * // Update one Kota
   * const kota = await prisma.kota.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends KotaUpdateArgs>(args: Prisma.SelectSubset<T, KotaUpdateArgs<ExtArgs>>): Prisma.Prisma__KotaClient<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Kotas.
   * @param {KotaDeleteManyArgs} args - Arguments to filter Kotas to delete.
   * @example
   * // Delete a few Kotas
   * const { count } = await prisma.kota.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends KotaDeleteManyArgs>(args?: Prisma.SelectSubset<T, KotaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Kotas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KotaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Kotas
   * const kota = await prisma.kota.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends KotaUpdateManyArgs>(args: Prisma.SelectSubset<T, KotaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Kotas and returns the data updated in the database.
   * @param {KotaUpdateManyAndReturnArgs} args - Arguments to update many Kotas.
   * @example
   * // Update many Kotas
   * const kota = await prisma.kota.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Kotas and only return the `id`
   * const kotaWithIdOnly = await prisma.kota.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends KotaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, KotaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Kota.
   * @param {KotaUpsertArgs} args - Arguments to update or create a Kota.
   * @example
   * // Update or create a Kota
   * const kota = await prisma.kota.upsert({
   *   create: {
   *     // ... data to create a Kota
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Kota we want to update
   *   }
   * })
   */
  upsert<T extends KotaUpsertArgs>(args: Prisma.SelectSubset<T, KotaUpsertArgs<ExtArgs>>): Prisma.Prisma__KotaClient<runtime.Types.Result.GetResult<Prisma.$KotaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Kotas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KotaCountArgs} args - Arguments to filter Kotas to count.
   * @example
   * // Count the number of Kotas
   * const count = await prisma.kota.count({
   *   where: {
   *     // ... the filter for the Kotas we want to count
   *   }
   * })
  **/
  count<T extends KotaCountArgs>(
    args?: Prisma.Subset<T, KotaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], KotaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Kota.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends KotaAggregateArgs>(args: Prisma.Subset<T, KotaAggregateArgs>): Prisma.PrismaPromise<GetKotaAggregateType<T>>

  /**
   * Group by Kota.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KotaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends KotaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: KotaGroupByArgs['orderBy'] }
      : { orderBy?: KotaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, KotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Kota model
 */
readonly fields: KotaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Kota.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__KotaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  daftarAgenda<T extends Prisma.Kota$daftarAgendaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Kota$daftarAgendaArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Kota model
 */
export interface KotaFieldRefs {
  readonly id: Prisma.FieldRef<"Kota", 'String'>
  readonly name: Prisma.FieldRef<"Kota", 'String'>
  readonly dibuatTanggal: Prisma.FieldRef<"Kota", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Kota findUnique
 */
export type KotaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * Filter, which Kota to fetch.
   */
  where: Prisma.KotaWhereUniqueInput
}

/**
 * Kota findUniqueOrThrow
 */
export type KotaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * Filter, which Kota to fetch.
   */
  where: Prisma.KotaWhereUniqueInput
}

/**
 * Kota findFirst
 */
export type KotaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * Filter, which Kota to fetch.
   */
  where?: Prisma.KotaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Kotas to fetch.
   */
  orderBy?: Prisma.KotaOrderByWithRelationInput | Prisma.KotaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Kotas.
   */
  cursor?: Prisma.KotaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Kotas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Kotas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Kotas.
   */
  distinct?: Prisma.KotaScalarFieldEnum | Prisma.KotaScalarFieldEnum[]
}

/**
 * Kota findFirstOrThrow
 */
export type KotaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * Filter, which Kota to fetch.
   */
  where?: Prisma.KotaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Kotas to fetch.
   */
  orderBy?: Prisma.KotaOrderByWithRelationInput | Prisma.KotaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Kotas.
   */
  cursor?: Prisma.KotaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Kotas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Kotas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Kotas.
   */
  distinct?: Prisma.KotaScalarFieldEnum | Prisma.KotaScalarFieldEnum[]
}

/**
 * Kota findMany
 */
export type KotaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * Filter, which Kotas to fetch.
   */
  where?: Prisma.KotaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Kotas to fetch.
   */
  orderBy?: Prisma.KotaOrderByWithRelationInput | Prisma.KotaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Kotas.
   */
  cursor?: Prisma.KotaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Kotas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Kotas.
   */
  skip?: number
  distinct?: Prisma.KotaScalarFieldEnum | Prisma.KotaScalarFieldEnum[]
}

/**
 * Kota create
 */
export type KotaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * The data needed to create a Kota.
   */
  data: Prisma.XOR<Prisma.KotaCreateInput, Prisma.KotaUncheckedCreateInput>
}

/**
 * Kota createMany
 */
export type KotaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Kotas.
   */
  data: Prisma.KotaCreateManyInput | Prisma.KotaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Kota createManyAndReturn
 */
export type KotaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * The data used to create many Kotas.
   */
  data: Prisma.KotaCreateManyInput | Prisma.KotaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Kota update
 */
export type KotaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * The data needed to update a Kota.
   */
  data: Prisma.XOR<Prisma.KotaUpdateInput, Prisma.KotaUncheckedUpdateInput>
  /**
   * Choose, which Kota to update.
   */
  where: Prisma.KotaWhereUniqueInput
}

/**
 * Kota updateMany
 */
export type KotaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Kotas.
   */
  data: Prisma.XOR<Prisma.KotaUpdateManyMutationInput, Prisma.KotaUncheckedUpdateManyInput>
  /**
   * Filter which Kotas to update
   */
  where?: Prisma.KotaWhereInput
  /**
   * Limit how many Kotas to update.
   */
  limit?: number
}

/**
 * Kota updateManyAndReturn
 */
export type KotaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * The data used to update Kotas.
   */
  data: Prisma.XOR<Prisma.KotaUpdateManyMutationInput, Prisma.KotaUncheckedUpdateManyInput>
  /**
   * Filter which Kotas to update
   */
  where?: Prisma.KotaWhereInput
  /**
   * Limit how many Kotas to update.
   */
  limit?: number
}

/**
 * Kota upsert
 */
export type KotaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * The filter to search for the Kota to update in case it exists.
   */
  where: Prisma.KotaWhereUniqueInput
  /**
   * In case the Kota found by the `where` argument doesn't exist, create a new Kota with this data.
   */
  create: Prisma.XOR<Prisma.KotaCreateInput, Prisma.KotaUncheckedCreateInput>
  /**
   * In case the Kota was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.KotaUpdateInput, Prisma.KotaUncheckedUpdateInput>
}

/**
 * Kota delete
 */
export type KotaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
  /**
   * Filter which Kota to delete.
   */
  where: Prisma.KotaWhereUniqueInput
}

/**
 * Kota deleteMany
 */
export type KotaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Kotas to delete
   */
  where?: Prisma.KotaWhereInput
  /**
   * Limit how many Kotas to delete.
   */
  limit?: number
}

/**
 * Kota.daftarAgenda
 */
export type Kota$daftarAgendaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agenda
   */
  select?: Prisma.AgendaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agenda
   */
  omit?: Prisma.AgendaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendaInclude<ExtArgs> | null
  where?: Prisma.AgendaWhereInput
  orderBy?: Prisma.AgendaOrderByWithRelationInput | Prisma.AgendaOrderByWithRelationInput[]
  cursor?: Prisma.AgendaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AgendaScalarFieldEnum | Prisma.AgendaScalarFieldEnum[]
}

/**
 * Kota without action
 */
export type KotaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kota
   */
  select?: Prisma.KotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kota
   */
  omit?: Prisma.KotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KotaInclude<ExtArgs> | null
}
