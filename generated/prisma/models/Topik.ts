
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Topik` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Topik
 * 
 */
export type TopikModel = runtime.Types.Result.DefaultSelection<Prisma.$TopikPayload>

export type AggregateTopik = {
  _count: TopikCountAggregateOutputType | null
  _min: TopikMinAggregateOutputType | null
  _max: TopikMaxAggregateOutputType | null
}

export type TopikMinAggregateOutputType = {
  id: string | null
  name: string | null
  dibuatTanggal: Date | null
}

export type TopikMaxAggregateOutputType = {
  id: string | null
  name: string | null
  dibuatTanggal: Date | null
}

export type TopikCountAggregateOutputType = {
  id: number
  name: number
  dibuatTanggal: number
  _all: number
}


export type TopikMinAggregateInputType = {
  id?: true
  name?: true
  dibuatTanggal?: true
}

export type TopikMaxAggregateInputType = {
  id?: true
  name?: true
  dibuatTanggal?: true
}

export type TopikCountAggregateInputType = {
  id?: true
  name?: true
  dibuatTanggal?: true
  _all?: true
}

export type TopikAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Topik to aggregate.
   */
  where?: Prisma.TopikWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Topiks to fetch.
   */
  orderBy?: Prisma.TopikOrderByWithRelationInput | Prisma.TopikOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TopikWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Topiks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Topiks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Topiks
  **/
  _count?: true | TopikCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TopikMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TopikMaxAggregateInputType
}

export type GetTopikAggregateType<T extends TopikAggregateArgs> = {
      [P in keyof T & keyof AggregateTopik]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTopik[P]>
    : Prisma.GetScalarType<T[P], AggregateTopik[P]>
}




export type TopikGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TopikWhereInput
  orderBy?: Prisma.TopikOrderByWithAggregationInput | Prisma.TopikOrderByWithAggregationInput[]
  by: Prisma.TopikScalarFieldEnum[] | Prisma.TopikScalarFieldEnum
  having?: Prisma.TopikScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TopikCountAggregateInputType | true
  _min?: TopikMinAggregateInputType
  _max?: TopikMaxAggregateInputType
}

export type TopikGroupByOutputType = {
  id: string
  name: string
  dibuatTanggal: Date
  _count: TopikCountAggregateOutputType | null
  _min: TopikMinAggregateOutputType | null
  _max: TopikMaxAggregateOutputType | null
}

type GetTopikGroupByPayload<T extends TopikGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TopikGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TopikGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TopikGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TopikGroupByOutputType[P]>
      }
    >
  >



export type TopikWhereInput = {
  AND?: Prisma.TopikWhereInput | Prisma.TopikWhereInput[]
  OR?: Prisma.TopikWhereInput[]
  NOT?: Prisma.TopikWhereInput | Prisma.TopikWhereInput[]
  id?: Prisma.StringFilter<"Topik"> | string
  name?: Prisma.StringFilter<"Topik"> | string
  dibuatTanggal?: Prisma.DateTimeFilter<"Topik"> | Date | string
  daftarAgenda?: Prisma.AgendaListRelationFilter
}

export type TopikOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
  daftarAgenda?: Prisma.AgendaOrderByRelationAggregateInput
}

export type TopikWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.TopikWhereInput | Prisma.TopikWhereInput[]
  OR?: Prisma.TopikWhereInput[]
  NOT?: Prisma.TopikWhereInput | Prisma.TopikWhereInput[]
  dibuatTanggal?: Prisma.DateTimeFilter<"Topik"> | Date | string
  daftarAgenda?: Prisma.AgendaListRelationFilter
}, "id" | "name">

export type TopikOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
  _count?: Prisma.TopikCountOrderByAggregateInput
  _max?: Prisma.TopikMaxOrderByAggregateInput
  _min?: Prisma.TopikMinOrderByAggregateInput
}

export type TopikScalarWhereWithAggregatesInput = {
  AND?: Prisma.TopikScalarWhereWithAggregatesInput | Prisma.TopikScalarWhereWithAggregatesInput[]
  OR?: Prisma.TopikScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TopikScalarWhereWithAggregatesInput | Prisma.TopikScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Topik"> | string
  name?: Prisma.StringWithAggregatesFilter<"Topik"> | string
  dibuatTanggal?: Prisma.DateTimeWithAggregatesFilter<"Topik"> | Date | string
}

export type TopikCreateInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
  daftarAgenda?: Prisma.AgendaCreateNestedManyWithoutTopikInput
}

export type TopikUncheckedCreateInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
  daftarAgenda?: Prisma.AgendaUncheckedCreateNestedManyWithoutTopikInput
}

export type TopikUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  daftarAgenda?: Prisma.AgendaUpdateManyWithoutTopikNestedInput
}

export type TopikUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  daftarAgenda?: Prisma.AgendaUncheckedUpdateManyWithoutTopikNestedInput
}

export type TopikCreateManyInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
}

export type TopikUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TopikUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TopikNullableScalarRelationFilter = {
  is?: Prisma.TopikWhereInput | null
  isNot?: Prisma.TopikWhereInput | null
}

export type TopikCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
}

export type TopikMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
}

export type TopikMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dibuatTanggal?: Prisma.SortOrder
}

export type TopikCreateNestedOneWithoutDaftarAgendaInput = {
  create?: Prisma.XOR<Prisma.TopikCreateWithoutDaftarAgendaInput, Prisma.TopikUncheckedCreateWithoutDaftarAgendaInput>
  connectOrCreate?: Prisma.TopikCreateOrConnectWithoutDaftarAgendaInput
  connect?: Prisma.TopikWhereUniqueInput
}

export type TopikUpdateOneWithoutDaftarAgendaNestedInput = {
  create?: Prisma.XOR<Prisma.TopikCreateWithoutDaftarAgendaInput, Prisma.TopikUncheckedCreateWithoutDaftarAgendaInput>
  connectOrCreate?: Prisma.TopikCreateOrConnectWithoutDaftarAgendaInput
  upsert?: Prisma.TopikUpsertWithoutDaftarAgendaInput
  disconnect?: Prisma.TopikWhereInput | boolean
  delete?: Prisma.TopikWhereInput | boolean
  connect?: Prisma.TopikWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TopikUpdateToOneWithWhereWithoutDaftarAgendaInput, Prisma.TopikUpdateWithoutDaftarAgendaInput>, Prisma.TopikUncheckedUpdateWithoutDaftarAgendaInput>
}

export type TopikCreateWithoutDaftarAgendaInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
}

export type TopikUncheckedCreateWithoutDaftarAgendaInput = {
  id?: string
  name: string
  dibuatTanggal?: Date | string
}

export type TopikCreateOrConnectWithoutDaftarAgendaInput = {
  where: Prisma.TopikWhereUniqueInput
  create: Prisma.XOR<Prisma.TopikCreateWithoutDaftarAgendaInput, Prisma.TopikUncheckedCreateWithoutDaftarAgendaInput>
}

export type TopikUpsertWithoutDaftarAgendaInput = {
  update: Prisma.XOR<Prisma.TopikUpdateWithoutDaftarAgendaInput, Prisma.TopikUncheckedUpdateWithoutDaftarAgendaInput>
  create: Prisma.XOR<Prisma.TopikCreateWithoutDaftarAgendaInput, Prisma.TopikUncheckedCreateWithoutDaftarAgendaInput>
  where?: Prisma.TopikWhereInput
}

export type TopikUpdateToOneWithWhereWithoutDaftarAgendaInput = {
  where?: Prisma.TopikWhereInput
  data: Prisma.XOR<Prisma.TopikUpdateWithoutDaftarAgendaInput, Prisma.TopikUncheckedUpdateWithoutDaftarAgendaInput>
}

export type TopikUpdateWithoutDaftarAgendaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TopikUncheckedUpdateWithoutDaftarAgendaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dibuatTanggal?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TopikCountOutputType
 */

export type TopikCountOutputType = {
  daftarAgenda: number
}

export type TopikCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  daftarAgenda?: boolean | TopikCountOutputTypeCountDaftarAgendaArgs
}

/**
 * TopikCountOutputType without action
 */
export type TopikCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TopikCountOutputType
   */
  select?: Prisma.TopikCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TopikCountOutputType without action
 */
export type TopikCountOutputTypeCountDaftarAgendaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AgendaWhereInput
}


export type TopikSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  dibuatTanggal?: boolean
  daftarAgenda?: boolean | Prisma.Topik$daftarAgendaArgs<ExtArgs>
  _count?: boolean | Prisma.TopikCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["topik"]>

export type TopikSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  dibuatTanggal?: boolean
}, ExtArgs["result"]["topik"]>

export type TopikSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  dibuatTanggal?: boolean
}, ExtArgs["result"]["topik"]>

export type TopikSelectScalar = {
  id?: boolean
  name?: boolean
  dibuatTanggal?: boolean
}

export type TopikOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "dibuatTanggal", ExtArgs["result"]["topik"]>
export type TopikInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  daftarAgenda?: boolean | Prisma.Topik$daftarAgendaArgs<ExtArgs>
  _count?: boolean | Prisma.TopikCountOutputTypeDefaultArgs<ExtArgs>
}
export type TopikIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type TopikIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $TopikPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Topik"
  objects: {
    daftarAgenda: Prisma.$AgendaPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    dibuatTanggal: Date
  }, ExtArgs["result"]["topik"]>
  composites: {}
}

export type TopikGetPayload<S extends boolean | null | undefined | TopikDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TopikPayload, S>

export type TopikCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TopikFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TopikCountAggregateInputType | true
  }

export interface TopikDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Topik'], meta: { name: 'Topik' } }
  /**
   * Find zero or one Topik that matches the filter.
   * @param {TopikFindUniqueArgs} args - Arguments to find a Topik
   * @example
   * // Get one Topik
   * const topik = await prisma.topik.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TopikFindUniqueArgs>(args: Prisma.SelectSubset<T, TopikFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TopikClient<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Topik that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TopikFindUniqueOrThrowArgs} args - Arguments to find a Topik
   * @example
   * // Get one Topik
   * const topik = await prisma.topik.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TopikFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TopikFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TopikClient<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Topik that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopikFindFirstArgs} args - Arguments to find a Topik
   * @example
   * // Get one Topik
   * const topik = await prisma.topik.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TopikFindFirstArgs>(args?: Prisma.SelectSubset<T, TopikFindFirstArgs<ExtArgs>>): Prisma.Prisma__TopikClient<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Topik that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopikFindFirstOrThrowArgs} args - Arguments to find a Topik
   * @example
   * // Get one Topik
   * const topik = await prisma.topik.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TopikFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TopikFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TopikClient<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Topiks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopikFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Topiks
   * const topiks = await prisma.topik.findMany()
   * 
   * // Get first 10 Topiks
   * const topiks = await prisma.topik.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const topikWithIdOnly = await prisma.topik.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TopikFindManyArgs>(args?: Prisma.SelectSubset<T, TopikFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Topik.
   * @param {TopikCreateArgs} args - Arguments to create a Topik.
   * @example
   * // Create one Topik
   * const Topik = await prisma.topik.create({
   *   data: {
   *     // ... data to create a Topik
   *   }
   * })
   * 
   */
  create<T extends TopikCreateArgs>(args: Prisma.SelectSubset<T, TopikCreateArgs<ExtArgs>>): Prisma.Prisma__TopikClient<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Topiks.
   * @param {TopikCreateManyArgs} args - Arguments to create many Topiks.
   * @example
   * // Create many Topiks
   * const topik = await prisma.topik.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TopikCreateManyArgs>(args?: Prisma.SelectSubset<T, TopikCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Topiks and returns the data saved in the database.
   * @param {TopikCreateManyAndReturnArgs} args - Arguments to create many Topiks.
   * @example
   * // Create many Topiks
   * const topik = await prisma.topik.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Topiks and only return the `id`
   * const topikWithIdOnly = await prisma.topik.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TopikCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TopikCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Topik.
   * @param {TopikDeleteArgs} args - Arguments to delete one Topik.
   * @example
   * // Delete one Topik
   * const Topik = await prisma.topik.delete({
   *   where: {
   *     // ... filter to delete one Topik
   *   }
   * })
   * 
   */
  delete<T extends TopikDeleteArgs>(args: Prisma.SelectSubset<T, TopikDeleteArgs<ExtArgs>>): Prisma.Prisma__TopikClient<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Topik.
   * @param {TopikUpdateArgs} args - Arguments to update one Topik.
   * @example
   * // Update one Topik
   * const topik = await prisma.topik.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TopikUpdateArgs>(args: Prisma.SelectSubset<T, TopikUpdateArgs<ExtArgs>>): Prisma.Prisma__TopikClient<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Topiks.
   * @param {TopikDeleteManyArgs} args - Arguments to filter Topiks to delete.
   * @example
   * // Delete a few Topiks
   * const { count } = await prisma.topik.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TopikDeleteManyArgs>(args?: Prisma.SelectSubset<T, TopikDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Topiks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopikUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Topiks
   * const topik = await prisma.topik.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TopikUpdateManyArgs>(args: Prisma.SelectSubset<T, TopikUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Topiks and returns the data updated in the database.
   * @param {TopikUpdateManyAndReturnArgs} args - Arguments to update many Topiks.
   * @example
   * // Update many Topiks
   * const topik = await prisma.topik.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Topiks and only return the `id`
   * const topikWithIdOnly = await prisma.topik.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TopikUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TopikUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Topik.
   * @param {TopikUpsertArgs} args - Arguments to update or create a Topik.
   * @example
   * // Update or create a Topik
   * const topik = await prisma.topik.upsert({
   *   create: {
   *     // ... data to create a Topik
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Topik we want to update
   *   }
   * })
   */
  upsert<T extends TopikUpsertArgs>(args: Prisma.SelectSubset<T, TopikUpsertArgs<ExtArgs>>): Prisma.Prisma__TopikClient<runtime.Types.Result.GetResult<Prisma.$TopikPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Topiks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopikCountArgs} args - Arguments to filter Topiks to count.
   * @example
   * // Count the number of Topiks
   * const count = await prisma.topik.count({
   *   where: {
   *     // ... the filter for the Topiks we want to count
   *   }
   * })
  **/
  count<T extends TopikCountArgs>(
    args?: Prisma.Subset<T, TopikCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TopikCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Topik.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopikAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TopikAggregateArgs>(args: Prisma.Subset<T, TopikAggregateArgs>): Prisma.PrismaPromise<GetTopikAggregateType<T>>

  /**
   * Group by Topik.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TopikGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TopikGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TopikGroupByArgs['orderBy'] }
      : { orderBy?: TopikGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TopikGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopikGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Topik model
 */
readonly fields: TopikFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Topik.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TopikClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  daftarAgenda<T extends Prisma.Topik$daftarAgendaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Topik$daftarAgendaArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AgendaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Topik model
 */
export interface TopikFieldRefs {
  readonly id: Prisma.FieldRef<"Topik", 'String'>
  readonly name: Prisma.FieldRef<"Topik", 'String'>
  readonly dibuatTanggal: Prisma.FieldRef<"Topik", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Topik findUnique
 */
export type TopikFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * Filter, which Topik to fetch.
   */
  where: Prisma.TopikWhereUniqueInput
}

/**
 * Topik findUniqueOrThrow
 */
export type TopikFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * Filter, which Topik to fetch.
   */
  where: Prisma.TopikWhereUniqueInput
}

/**
 * Topik findFirst
 */
export type TopikFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * Filter, which Topik to fetch.
   */
  where?: Prisma.TopikWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Topiks to fetch.
   */
  orderBy?: Prisma.TopikOrderByWithRelationInput | Prisma.TopikOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Topiks.
   */
  cursor?: Prisma.TopikWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Topiks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Topiks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Topiks.
   */
  distinct?: Prisma.TopikScalarFieldEnum | Prisma.TopikScalarFieldEnum[]
}

/**
 * Topik findFirstOrThrow
 */
export type TopikFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * Filter, which Topik to fetch.
   */
  where?: Prisma.TopikWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Topiks to fetch.
   */
  orderBy?: Prisma.TopikOrderByWithRelationInput | Prisma.TopikOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Topiks.
   */
  cursor?: Prisma.TopikWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Topiks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Topiks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Topiks.
   */
  distinct?: Prisma.TopikScalarFieldEnum | Prisma.TopikScalarFieldEnum[]
}

/**
 * Topik findMany
 */
export type TopikFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * Filter, which Topiks to fetch.
   */
  where?: Prisma.TopikWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Topiks to fetch.
   */
  orderBy?: Prisma.TopikOrderByWithRelationInput | Prisma.TopikOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Topiks.
   */
  cursor?: Prisma.TopikWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Topiks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Topiks.
   */
  skip?: number
  distinct?: Prisma.TopikScalarFieldEnum | Prisma.TopikScalarFieldEnum[]
}

/**
 * Topik create
 */
export type TopikCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * The data needed to create a Topik.
   */
  data: Prisma.XOR<Prisma.TopikCreateInput, Prisma.TopikUncheckedCreateInput>
}

/**
 * Topik createMany
 */
export type TopikCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Topiks.
   */
  data: Prisma.TopikCreateManyInput | Prisma.TopikCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Topik createManyAndReturn
 */
export type TopikCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * The data used to create many Topiks.
   */
  data: Prisma.TopikCreateManyInput | Prisma.TopikCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Topik update
 */
export type TopikUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * The data needed to update a Topik.
   */
  data: Prisma.XOR<Prisma.TopikUpdateInput, Prisma.TopikUncheckedUpdateInput>
  /**
   * Choose, which Topik to update.
   */
  where: Prisma.TopikWhereUniqueInput
}

/**
 * Topik updateMany
 */
export type TopikUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Topiks.
   */
  data: Prisma.XOR<Prisma.TopikUpdateManyMutationInput, Prisma.TopikUncheckedUpdateManyInput>
  /**
   * Filter which Topiks to update
   */
  where?: Prisma.TopikWhereInput
  /**
   * Limit how many Topiks to update.
   */
  limit?: number
}

/**
 * Topik updateManyAndReturn
 */
export type TopikUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * The data used to update Topiks.
   */
  data: Prisma.XOR<Prisma.TopikUpdateManyMutationInput, Prisma.TopikUncheckedUpdateManyInput>
  /**
   * Filter which Topiks to update
   */
  where?: Prisma.TopikWhereInput
  /**
   * Limit how many Topiks to update.
   */
  limit?: number
}

/**
 * Topik upsert
 */
export type TopikUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * The filter to search for the Topik to update in case it exists.
   */
  where: Prisma.TopikWhereUniqueInput
  /**
   * In case the Topik found by the `where` argument doesn't exist, create a new Topik with this data.
   */
  create: Prisma.XOR<Prisma.TopikCreateInput, Prisma.TopikUncheckedCreateInput>
  /**
   * In case the Topik was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TopikUpdateInput, Prisma.TopikUncheckedUpdateInput>
}

/**
 * Topik delete
 */
export type TopikDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
  /**
   * Filter which Topik to delete.
   */
  where: Prisma.TopikWhereUniqueInput
}

/**
 * Topik deleteMany
 */
export type TopikDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Topiks to delete
   */
  where?: Prisma.TopikWhereInput
  /**
   * Limit how many Topiks to delete.
   */
  limit?: number
}

/**
 * Topik.daftarAgenda
 */
export type Topik$daftarAgendaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Agenda
   */
  select?: Prisma.AgendaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Agenda
   */
  omit?: Prisma.AgendaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AgendaInclude<ExtArgs> | null
  where?: Prisma.AgendaWhereInput
  orderBy?: Prisma.AgendaOrderByWithRelationInput | Prisma.AgendaOrderByWithRelationInput[]
  cursor?: Prisma.AgendaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AgendaScalarFieldEnum | Prisma.AgendaScalarFieldEnum[]
}

/**
 * Topik without action
 */
export type TopikDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Topik
   */
  select?: Prisma.TopikSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Topik
   */
  omit?: Prisma.TopikOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TopikInclude<ExtArgs> | null
}
